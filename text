Project 3: Pass 1 Assembler
===========================

Rothanak So (n01128755)


# Purpose

The purpose of this project is to implement pass 1 of the SIC assembler. This
project will later be used for pass 2. The program uses a hash table to maintain
a list of valid mnemonics and a separate hash table to store labeled instructions
with their computed addresses. The program parses instructions based off a grammar
in order to differentiate between labeled and unlabeled instructions, and directives
and instructions.


# Source files

Source files are located at `src/main/kotlin/so/roth/cop3404/assembler`. The
package structure is like so:

  hash\
       HashTable.kt		HashTable class (with the hashing algorithm)
       Keyed.k			Interface that allows classes to specify their key
       Node.kt			Sealed class of the kinds of HashTable cells
       ProbingStrategy.kt	Interface for defining how to compute the next hash
   util\
       Math.kt			Helper methods for computing primes
       Sic.kt           Helper method for computing size of an BYTE instruction
   AssemblyError        Data class representing a stored error message
   Main.kt			    Main method, which performs the pass 1 assembly
   Grammar.kt           A set of classes describing the grammar of SIC
   Sicop.kt			    Data class representing a valid SIC mnemonic


# Input

The program requires an input file to be passed in as the first argument. The
input file is the SIC program that is to be assembled. The input program will
need to adhere to the following format:

     Col 1-8    Label (optional)
     Col 9      Blank
     Col 10     + or * (optional)
     Col 11-17  Mnemonic
     Col 18     Blank
     Col 19     #, @, = (optional)
     Col 20-29  Operand
     Col 30-31  Blank
     Col 32-80  Comments (optional)

The sample input file is located at `src/test/resources/input.txt`.


# Output

The program will output to the console. The program will print the input
file with the computed addresses of each instruction. The program will
also display the hash table in which the labeled instructions were stored.

The following errors will also be reported:

  - Instructions without labels
  - Invalid mnemonics
  - Duplicate labels

There is a sample output file at `src/test/resources/output.txt`.


# How to execute

The project was developed using Gradle, but can be built with the Kotlin
compiler directly. The compiler is automatically installed locally during
the first `make`, which will output a JAR that can be executed on the JVM.

  1. Run the `make` command to produce the JAR.
  2. Run `java -jar assembler.jar`, specifying the input file name
  3. Optionally, run `make clean` afterward to free up disk space
